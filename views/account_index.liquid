{% layout "layouts/base.liquid" %}

{% block content %}
  <div class="ui container">
    <h1>나무증권 요약: {{ dateKst }}</h1>

    <dl>
      <dt>UTC</dt>
      <dd>{{ createdAt | date: "%Y-%m-%dT%H:%M:%S:%LZ" }}</dd>

      <dt>KST</dt>
      <dd>{{ createdAt | date: "%Y-%m-%d %H:%M:%S", -540 }}</dd>
    </dl>

    <button
      class="ui small button"
      hx-post="/account/update"
      hx-target="#result-update">
      update
      <span class="htmx-indicator">
        <i class="spinner icon"></i>
      </span>
    </button>
    <div id="result-update"></div>

    <!-- 테이블 규격으로 정렬하고 싶다 -->
    <table class="ui celled very compact selectable unstackable table">
      <thead>
        {% render 'table_header.liquid'
          , label: "종합" %}
      </thead>
      <tbody>
        {% render 'table_data.liquid'
          , product: summary
          , holding: summary
          , issue_name: "종합" }
        %}
      </tbody>

      <thead>
        {% render 'table_header.liquid'
          , label: "계좌별" %}
      </thead>

      <tbody>
        {% for report in reports %}
          {% assign summary = report.summary %}
          {% capture issue_name %}
            계좌 {{ report.accountId }}
          {% endcapture %}
          {% render 'table_data.liquid'
            , product: summary
            , holding: summary
            , issue_name: issue_name }
          %}
        {% endfor %}
      </tbody>

      {% for report in reports %}
        {% assign snapshots = report.snapshots %}
        {% capture label %}
          잔고유형 {{ report.accountId }}
        {% endcapture %}

        <thead>
          {% render 'table_header.liquid'
            , label: label %}
        </thead>
        <tbody>
          {% for entry in snapshots %}
            {% render 'table_data.liquid'
              , product: entry.product
              , holding: entry.holding
              , issue_name: entry.product.issue_name %}
          {% endfor %}
        </tbody>
      {% endfor %}
    </table>
  </div>

  <br/>
  <br/>
  <br/>
  <br/>
  <br/>
  <br/>
  <br/>
  <br/>
  <br/>

  <script>
    const currencyElements = document.querySelectorAll('.currency-text');
    for(const currencyElement of currencyElements ) {
      const v = Number.parseFloat(currencyElement.textContent);
      if(!Number.isNaN(v)) {
        currencyElement.textContent = v.toLocaleString();
      }
    }
  </script>
{% endblock %}